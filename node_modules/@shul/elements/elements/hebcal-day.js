import { __esDecorate, __runInitializers, __setFunctionName } from "tslib";
import { LitElement, html } from 'lit';
import { customElement, property, state } from 'lit/decorators.js';
import { consume, createContext, provide } from '@lit/context';
import { observes } from './lib/decorators.js';
import { HebCalDay } from './HebCalDay.js';
import { css } from "lit";
const sharedStyles = css `:host {\n  display: block;\n}\n\n:is(h2, h3, h4, h5, h6) {\n  margin: 0;\n}\n\n[hidden] {\n  display: none !important;\n}\n\nsmall,\n::slotted(small) {\n  font-size: 80%;\n}\n`;
const styles = css `:host {\n  display: block;\n}\n`;
const childStyles = css `heading {\n  display: flex;\n  align-items: center;\n  gap: var(--hebcal-column-gap);\n}\n\ndl {\n  display: grid;\n  grid-template-columns: auto;\n  align-items: end;\n  margin: 0;\n  gap:\n    var(--hebcal-row-gap, 0.5em)\n    var(--hebcal-column-gap, 1em);\n}\n\n@media (min-width: 400px) {\n  dl {\n    grid-template-columns: max-content auto;\n  }\n}\n\ndl > div {\n  display: contents;\n  font-size: var(--size);\n}\n\ndt {\n  justify-self: start;\n}\n\ndd {\n  margin: 0;\n  font-weight: bold;\n}\n\n.past :is(dt, dd) {\n  opacity: 0.5;\n}\n\n.next {\n  --size: var(--hebcal-next-zman-font-size, 120%);\n}\n`;
import { ClockController } from './lib/ClockController.js';
import { DateConverter } from './lib/DateConverter.js';
const context = createContext('hebcal');
let HebcalDay = (() => {
    let _classDecorators = [customElement('hebcal-day')];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = LitElement;
    let _instanceExtraInitializers = [];
    let _locale_decorators;
    let _locale_initializers = [];
    let _city_decorators;
    let _city_initializers = [];
    let _latitude_decorators;
    let _latitude_initializers = [];
    let _longitude_decorators;
    let _longitude_initializers = [];
    let _tzeitDegrees_decorators;
    let _tzeitDegrees_initializers = [];
    let _candleLightingMinutesBeforeSunset_decorators;
    let _candleLightingMinutesBeforeSunset_initializers = [];
    let _havdalahMinutesAfterSunset_decorators;
    let _havdalahMinutesAfterSunset_initializers = [];
    let _havdalahDegrees_decorators;
    let _havdalahDegrees_initializers = [];
    let _specificDate_decorators;
    let _specificDate_initializers = [];
    let _debug_decorators;
    let _debug_initializers = [];
    let _hayom_decorators;
    let _hayom_initializers = [];
    let _private_debugDateChanged_decorators;
    let _private_debugDateChanged_descriptor;
    let _private_dateChanged_decorators;
    let _private_dateChanged_descriptor;
    var HebcalDay = class extends _classSuper {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _locale_decorators = [property()];
            _city_decorators = [property()];
            _latitude_decorators = [property({ type: Number })];
            _longitude_decorators = [property({ type: Number })];
            _tzeitDegrees_decorators = [property({
                    type: Number,
                    attribute: 'tzeit-degrees',
                })];
            _candleLightingMinutesBeforeSunset_decorators = [property({
                    type: Number,
                    attribute: 'candle-lighting-minutes-before-sunset',
                })];
            _havdalahMinutesAfterSunset_decorators = [property({
                    type: Number,
                    attribute: 'havdalah-minutes-after-sunset',
                })];
            _havdalahDegrees_decorators = [property({
                    type: Number,
                    attribute: 'havdalah-degrees',
                })];
            _specificDate_decorators = [property({
                    converter: DateConverter,
                    reflect: true,
                    attribute: 'specific-date',
                })];
            _debug_decorators = [property({ reflect: true, type: Boolean })];
            _hayom_decorators = [state(), provide({ context })];
            _private_debugDateChanged_decorators = [observes('specificDate')];
            _private_dateChanged_decorators = [observes('#clock', 'candleLightingMinutesBeforeSunset', 'date', 'debug', 'havdalahDegrees', 'havdalahMinutesAfterSunset', 'tzeitDegrees')];
            __esDecorate(this, null, _locale_decorators, { kind: "accessor", name: "locale", static: false, private: false, access: { has: obj => "locale" in obj, get: obj => obj.locale, set: (obj, value) => { obj.locale = value; } }, metadata: _metadata }, _locale_initializers, _instanceExtraInitializers);
            __esDecorate(this, null, _city_decorators, { kind: "accessor", name: "city", static: false, private: false, access: { has: obj => "city" in obj, get: obj => obj.city, set: (obj, value) => { obj.city = value; } }, metadata: _metadata }, _city_initializers, _instanceExtraInitializers);
            __esDecorate(this, null, _latitude_decorators, { kind: "accessor", name: "latitude", static: false, private: false, access: { has: obj => "latitude" in obj, get: obj => obj.latitude, set: (obj, value) => { obj.latitude = value; } }, metadata: _metadata }, _latitude_initializers, _instanceExtraInitializers);
            __esDecorate(this, null, _longitude_decorators, { kind: "accessor", name: "longitude", static: false, private: false, access: { has: obj => "longitude" in obj, get: obj => obj.longitude, set: (obj, value) => { obj.longitude = value; } }, metadata: _metadata }, _longitude_initializers, _instanceExtraInitializers);
            __esDecorate(this, null, _tzeitDegrees_decorators, { kind: "accessor", name: "tzeitDegrees", static: false, private: false, access: { has: obj => "tzeitDegrees" in obj, get: obj => obj.tzeitDegrees, set: (obj, value) => { obj.tzeitDegrees = value; } }, metadata: _metadata }, _tzeitDegrees_initializers, _instanceExtraInitializers);
            __esDecorate(this, null, _candleLightingMinutesBeforeSunset_decorators, { kind: "accessor", name: "candleLightingMinutesBeforeSunset", static: false, private: false, access: { has: obj => "candleLightingMinutesBeforeSunset" in obj, get: obj => obj.candleLightingMinutesBeforeSunset, set: (obj, value) => { obj.candleLightingMinutesBeforeSunset = value; } }, metadata: _metadata }, _candleLightingMinutesBeforeSunset_initializers, _instanceExtraInitializers);
            __esDecorate(this, null, _havdalahMinutesAfterSunset_decorators, { kind: "accessor", name: "havdalahMinutesAfterSunset", static: false, private: false, access: { has: obj => "havdalahMinutesAfterSunset" in obj, get: obj => obj.havdalahMinutesAfterSunset, set: (obj, value) => { obj.havdalahMinutesAfterSunset = value; } }, metadata: _metadata }, _havdalahMinutesAfterSunset_initializers, _instanceExtraInitializers);
            __esDecorate(this, null, _havdalahDegrees_decorators, { kind: "accessor", name: "havdalahDegrees", static: false, private: false, access: { has: obj => "havdalahDegrees" in obj, get: obj => obj.havdalahDegrees, set: (obj, value) => { obj.havdalahDegrees = value; } }, metadata: _metadata }, _havdalahDegrees_initializers, _instanceExtraInitializers);
            __esDecorate(this, null, _specificDate_decorators, { kind: "accessor", name: "specificDate", static: false, private: false, access: { has: obj => "specificDate" in obj, get: obj => obj.specificDate, set: (obj, value) => { obj.specificDate = value; } }, metadata: _metadata }, _specificDate_initializers, _instanceExtraInitializers);
            __esDecorate(this, null, _debug_decorators, { kind: "accessor", name: "debug", static: false, private: false, access: { has: obj => "debug" in obj, get: obj => obj.debug, set: (obj, value) => { obj.debug = value; } }, metadata: _metadata }, _debug_initializers, _instanceExtraInitializers);
            __esDecorate(this, null, _hayom_decorators, { kind: "accessor", name: "hayom", static: false, private: false, access: { has: obj => "hayom" in obj, get: obj => obj.hayom, set: (obj, value) => { obj.hayom = value; } }, metadata: _metadata }, _hayom_initializers, _instanceExtraInitializers);
            __esDecorate(this, _private_debugDateChanged_descriptor = { value: __setFunctionName(function (old) {
                    if (old.specificDate && !this.specificDate) {
                        this.#clock.reset();
                        this.#clock.start();
                    }
                    else {
                        this.#clock.stop();
                        this.#clock.set(this.specificDate);
                        this.requestUpdate('#clock', old.specificDate);
                    }
                }, "#debugDateChanged") }, _private_debugDateChanged_decorators, { kind: "method", name: "#debugDateChanged", static: false, private: true, access: { has: obj => #debugDateChanged in obj, get: obj => obj.#debugDateChanged }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, _private_dateChanged_descriptor = { value: __setFunctionName(function () {
                    this.hayom = this.#getHebcalDay();
                }, "#dateChanged") }, _private_dateChanged_decorators, { kind: "method", name: "#dateChanged", static: false, private: true, access: { has: obj => #dateChanged in obj, get: obj => obj.#dateChanged }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            HebcalDay = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static styles = [sharedStyles, styles];
        #locale_accessor_storage = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _locale_initializers, 'he-IL'
        /**
         * City whence to lookup zmanim
         * @see https://github.com/hebcal/hebcal-es6/tree/main#locationlookupname--location
         */
        ));
        /**
         * Locale for translating strings.
         * Currently, `he-IL` and `en-US` are supported.
         */
        get locale() { return this.#locale_accessor_storage; }
        set locale(value) { this.#locale_accessor_storage = value; }
        #city_accessor_storage = __runInitializers(this, _city_initializers, 'Jerusalem');
        /**
         * City whence to lookup zmanim
         * @see https://github.com/hebcal/hebcal-es6/tree/main#locationlookupname--location
         */
        get city() { return this.#city_accessor_storage; }
        set city(value) { this.#city_accessor_storage = value; }
        #latitude_accessor_storage = __runInitializers(this, _latitude_initializers, void 0);
        /** setting latitude and longitude overrides `city` */
        get latitude() { return this.#latitude_accessor_storage; }
        set latitude(value) { this.#latitude_accessor_storage = value; }
        #longitude_accessor_storage = __runInitializers(this, _longitude_initializers, void 0);
        /** setting latitude and longitude overrides `city` */
        get longitude() { return this.#longitude_accessor_storage; }
        set longitude(value) { this.#longitude_accessor_storage = value; }
        #tzeitDegrees_accessor_storage = __runInitializers(this, _tzeitDegrees_initializers, void 0);
        /**
         * Angle at which to establish nightfall
         * @see https://github.com/hebcal/hebcal-es6/tree/main#zmanimtzeitangle--date
         */
        get tzeitDegrees() { return this.#tzeitDegrees_accessor_storage; }
        set tzeitDegrees(value) { this.#tzeitDegrees_accessor_storage = value; }
        #candleLightingMinutesBeforeSunset_accessor_storage = __runInitializers(this, _candleLightingMinutesBeforeSunset_initializers, void 0);
        /**
         * Number of minutes before *shkia* when Shabbat candles are lit.
         * Customarily 18 minutes outside of Jerusalem, and 40 minutes in Jerusalem
         */
        get candleLightingMinutesBeforeSunset() { return this.#candleLightingMinutesBeforeSunset_accessor_storage; }
        set candleLightingMinutesBeforeSunset(value) { this.#candleLightingMinutesBeforeSunset_accessor_storage = value; }
        #havdalahMinutesAfterSunset_accessor_storage = __runInitializers(this, _havdalahMinutesAfterSunset_initializers, 0);
        /**
         * Number of minutes after sunset when Shabbat is customarily ended.
         */
        get havdalahMinutesAfterSunset() { return this.#havdalahMinutesAfterSunset_accessor_storage; }
        set havdalahMinutesAfterSunset(value) { this.#havdalahMinutesAfterSunset_accessor_storage = value; }
        #havdalahDegrees_accessor_storage = __runInitializers(this, _havdalahDegrees_initializers, 0);
        get havdalahDegrees() { return this.#havdalahDegrees_accessor_storage; }
        set havdalahDegrees(value) { this.#havdalahDegrees_accessor_storage = value; }
        #specificDate_accessor_storage = __runInitializers(this, _specificDate_initializers, void 0);
        /**
         * When set, hebcal elements will display information for the specific date
         */
        get specificDate() { return this.#specificDate_accessor_storage; }
        set specificDate(value) { this.#specificDate_accessor_storage = value; }
        /** @internal */
        #clock = new ClockController(this, '#clock');
        #debug_accessor_storage = __runInitializers(this, _debug_initializers, false);
        get debug() { return this.#debug_accessor_storage; }
        set debug(value) { this.#debug_accessor_storage = value; }
        #hayom_accessor_storage = __runInitializers(this, _hayom_initializers, this.#getHebcalDay());
        /**
         * Shared object representing the current (or selected) Hebrew calendar day
         */
        get hayom() { return this.#hayom_accessor_storage; }
        set hayom(value) { this.#hayom_accessor_storage = value; }
        get date() { return this.#clock.date; }
        set date(date) { this.#clock.set(date); }
        render() {
            return html `
      <slot></slot>
    `;
        }
        get #debugDateChanged() { return _private_debugDateChanged_descriptor.value; }
        get #dateChanged() { return _private_dateChanged_descriptor.value; }
        #getHebcalDay() {
            const { date, debug, city, longitude, latitude, locale, tzeitDegrees, candleLightingMinutesBeforeSunset, } = this;
            const havdalahMins = this.havdalahMinutesAfterSunset || undefined;
            const havdalahDeg = this.havdalahDegrees || undefined;
            return new HebCalDay({
                date,
                debug,
                city, locale,
                latitude, longitude,
                tzeitDeg: tzeitDegrees,
                candleLightingMins: candleLightingMinutesBeforeSunset,
                havdalahMins,
                havdalahDeg,
            });
        }
        static {
            __runInitializers(_classThis, _classExtraInitializers);
        }
    };
    return HebcalDay = _classThis;
})();
export { HebcalDay };
let HebcalDayConsumer = (() => {
    let _classSuper = LitElement;
    let _instanceExtraInitializers = [];
    let _hayom_decorators;
    let _hayom_initializers = [];
    return class HebcalDayConsumer extends _classSuper {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _hayom_decorators = [consume({ context, subscribe: true })];
            __esDecorate(this, null, _hayom_decorators, { kind: "accessor", name: "hayom", static: false, private: false, access: { has: obj => "hayom" in obj, get: obj => obj.hayom, set: (obj, value) => { obj.hayom = value; } }, metadata: _metadata }, _hayom_initializers, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static styles = [sharedStyles, childStyles];
        #hayom_accessor_storage = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _hayom_initializers, void 0));
        /**
         * Shared object representing the current (or selected) Hebrew calendar day
         */
        get hayom() { return this.#hayom_accessor_storage; }
        set hayom(value) { this.#hayom_accessor_storage = value; }
    };
})();
export { HebcalDayConsumer };
//# sourceMappingURL=hebcal-day.js.map