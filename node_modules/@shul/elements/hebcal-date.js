import { __esDecorate, __runInitializers } from "tslib";
import { html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { HebcalDayConsumer } from './hebcal-day.js';
import { css } from "lit";
const styles = css `:host {\n  display: block;\n  font-size: 1.2em;\n}\n\ntime {\n  display: contents;\n}\n\n`;
/**
 * Hebcal date
 */
let HebcalDate = (() => {
    let _classDecorators = [customElement('hebcal-date')];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = HebcalDayConsumer;
    let _instanceExtraInitializers = [];
    let _gematriya_decorators;
    let _gematriya_initializers = [];
    var HebcalDate = class extends _classSuper {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _gematriya_decorators = [property({ type: Boolean, reflect: true })];
            __esDecorate(this, null, _gematriya_decorators, { kind: "accessor", name: "gematriya", static: false, private: false, access: { has: obj => "gematriya" in obj, get: obj => obj.gematriya, set: (obj, value) => { obj.gematriya = value; } }, metadata: _metadata }, _gematriya_initializers, _instanceExtraInitializers);
            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            HebcalDate = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static styles = [styles];
        #gematriya_accessor_storage = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _gematriya_initializers, false));
        get gematriya() { return this.#gematriya_accessor_storage; }
        set gematriya(value) { this.#gematriya_accessor_storage = value; }
        render() {
            const { date, locale, hDate } = this.hayom;
            const day = this.hayom.i18n.days[this.hayom.hDate.getDay()];
            const dateRendered = this.gematriya ? hDate.renderGematriya(true)
                : hDate.render(locale.substring(0, 2));
            return html `
      <time datetime="${date.toISOString()}">
        <span part="day">${day}</span>
        <span part="date">${dateRendered}</span>
      </time>
    `;
        }
        static {
            __runInitializers(_classThis, _classExtraInitializers);
        }
    };
    return HebcalDate = _classThis;
})();
export { HebcalDate };
//# sourceMappingURL=hebcal-date.js.map