import { __esDecorate, __runInitializers } from "tslib";
import { html } from 'lit';
import { HebcalDayConsumer } from './hebcal-day.js';
import { customElement } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
let ZmaneiYom = (() => {
    let _classDecorators = [customElement('zmanei-yom')];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = HebcalDayConsumer;
    var ZmaneiYom = class extends _classSuper {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            ZmaneiYom = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            __runInitializers(_classThis, _classExtraInitializers);
        }
        render() {
            const { dailyZmanim, i18n, locale, tzeitDeg } = this.hayom ?? {};
            return html `
      <heading>
        <h2>${i18n?.zmanei ?? ''} ${i18n?.yom ?? ''}</h2>
      </heading>
      <dl>${dailyZmanim?.map(({ key, date, past, next }) => html `
        <div class="${classMap({ past, next })}">
          <dt part="list term">
            <span>${i18n[key]}</span>${key !== 'tzeit' ? '' : html `
            <small>(${tzeitDeg}Â°)</small>`}
          </dt>
          <dd part="list definition">
            <time datetime="${date.toISOString()}">
              ${date.toLocaleTimeString(locale, { timeStyle: 'medium' })}
            </time>
          </dd>
        </div>`)}
      </dl>
    `;
        }
    };
    return ZmaneiYom = _classThis;
})();
export { ZmaneiYom };
//# sourceMappingURL=zmanei-yom.js.map