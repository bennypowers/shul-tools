import { type Event as HebCalEvent, HDate, ParshaEvent, CandleLightingEvent, HavdalahEvent } from '@hebcal/core';
export type ZmanimKey = typeof DailyZmanim.ZMANIM_KEYS[number];
export type ZmanimI18nKeys = Record<ZmanimKey, string>;
export interface I18nKeys extends ZmanimI18nKeys {
    shabbat: string;
    chag: string;
    zmanei: string;
    yom: string;
    and: string;
    zmaneiTefillah: string;
    days: string[];
}
interface HebCalInitBase {
    debug?: boolean;
    date: Date;
    city: string;
    locale: string;
    latitude: number;
    longitude: number;
    tzeitDeg: number;
    candleLightingMins: number;
}
export type HebCalInit = HebCalInitBase & ({
    havdalahMins: number;
} | {
    havdalahDeg: number;
});
export interface CandleLightingInfo {
    categories: string[];
    lighting: CandleLightingEvent;
    havdalah: HavdalahEvent;
}
export interface ZmanInfo {
    date: Date;
    past: boolean;
    next: boolean;
}
declare class DailyZmanim {
    #private;
    static readonly ZMANIM_KEYS: readonly ["alotHaShachar", "misheyakir", "sunrise", "sofZmanShmaMGA", "sofZmanShma", "sofZmanTfillaMGA", "sofZmanTfilla", "minchaGedola", "minchaKetana", "plagHaMincha", "sunset", "tzeit"];
    readonly alotHaShachar: Date;
    readonly misheyakir: Date;
    readonly sunrise: Date;
    readonly sofZmanShmaMGA: Date;
    readonly sofZmanShma: Date;
    readonly sofZmanTfillaMGA: Date;
    readonly sofZmanTfilla: Date;
    readonly minchaGedola: Date;
    readonly minchaKetana: Date;
    readonly plagHaMincha: Date;
    readonly sunset: Date;
    readonly tzeit: Date;
    constructor(now: Date, lat: number, long: number, tzeitDeg?: number);
    get(key: ZmanimKey): Date;
    isPast(key: ZmanimKey): boolean;
    isNext(key: ZmanimKey): boolean;
    map<A>(fn: (x?: ZmanInfo & {
        key: ZmanimKey;
    }, i?: number, a?: (ZmanInfo & {
        key: ZmanimKey;
    })[]) => A): A[];
}
export declare class HebCalDay {
    #private;
    static readonly i18n: Record<string, I18nKeys>;
    debug: boolean;
    date: Date;
    locale: string;
    city: string;
    latitude: number;
    longitude: number;
    tzeitDeg: number;
    candleLightingMins: number;
    havdalahMins: number;
    havdalahDeg: number;
    readonly hDate: HDate;
    readonly nextHDate: HDate;
    readonly parsha: ParshaEvent;
    readonly candles: CandleLightingInfo;
    readonly dailyZmanim: DailyZmanim;
    readonly eventsToday: HebCalEvent[];
    readonly eventsTomorrow: HebCalEvent[];
    readonly timeParts: Record<'hour' | 'minute' | 'second' | 'timeZoneName' | 'dayPeriod', string>;
    readonly midnight: Date;
    get i18n(): I18nKeys;
    get isShabbat(): boolean;
    get isErevShabbat(): boolean;
    get isChag(): boolean;
    get isErevChag(): boolean;
    get isWeekday(): boolean;
    get isRoshChodesh(): boolean;
    get isCholHamoed(): boolean;
    constructor(options: HebCalInit);
}
export {};
