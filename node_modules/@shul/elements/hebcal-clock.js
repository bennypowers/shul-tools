import { __esDecorate, __runInitializers } from "tslib";
import { html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js';
import { HebcalDayConsumer } from './hebcal-day.js';
import { classMap } from 'lit/directives/class-map.js';
import { css } from "lit";
const styles = css `:host {\n  display: block;\n}\n\n[part=time] {\n  font-weight: 500;\n}\n\ntime {\n  display: contents;\n}\n\n/* digital clock */\nstrong {\n  display: flex;\n  align-items: center;\n  font-family: monospace;\n  font-size: 200%;\n  & > * {\n    display: block;\n  }\n}\n\n[part=hour],\n[part=minute],\n[part=second] {\n  width: 1.5em;\n}\n\n/**\n * Analogue zmanim clock\n * ticking hands based on work done by Mate Marschalko\n * https://css-tricks.com/of-course-we-can-make-a-css-only-clock-that-tells-the-current-time/\n * indexes based on work by Brecht De Ruyte\n */\n\n:host([type=analogue i]) {\n  --shadow-color: #0005;\n  --_degrees-per-minute: 6deg;\n  --_degrees-per-hour: 30deg;\n\n  container-type: size;\n  width: var(--hebcal-clock-size);\n  max-height: 100cqw !important;\n  aspect-ratio: 1;\n  position: relative;\n  rotate: 180deg;\n}\n\n:host([type=analogue i]) time {\n  --s: 8cqw;\n  --q:  calc(var(--s) / 4);\n  display: block;\n  border-color: black;\n  border-style: solid;\n  border-width: var(--q);\n  border-radius: 50%;\n  width: 100cqw;\n  height: 100cqw;\n  box-shadow:\n    var(--shadow-color)\n    calc(-1 * var(--q))\n    calc(-1 * var(--q))\n    var(--q);\n\n  --_second: calc(var(--second) * 6deg /* second-hand degrees per second (360/60) */);\n  --_minute: calc(\n      var(--minute)\n    * 6deg /* minute-hand degrees per minute */\n    + (\n        var(--second)\n      * 0.1deg /* minute-hand degrees per second (360/60/60)*/\n    )\n  );\n  --_hour: calc(\n      var(--hour)\n    * 30deg /* hour-hand degrees per hour (360/12) */\n    + (\n        var(--minute)\n      * 0.5deg /* hour degrees per minute (360/12/60) */\n    )\n  );\n\n  &::after {\n    display: block;\n    position: absolute;\n    width: var(--s);\n    top: calc(50cqw - var(--s) + var(--q) + 1cqw);\n    left: calc(50cqw - var(--s) / 2 - var(--q) - 1cqw);\n    content: " ";\n    background: white;\n    border-radius: 100%;\n    border: 2cqw solid black;\n    z-index: 2;\n    aspect-ratio: 1 / 1;\n    box-shadow:\n      var(--shadow-color)\n      calc(-1 * var(--q))\n      calc(-1 * var(--q))\n      calc(var(--q));\n  }\n}\n\n#face {\n  width: 100cqw;\n  aspect-ratio: 1;\n  display: block;\n  rotate: 180deg;\n  border-radius: 100%;\n  box-shadow:\n    var(--shadow-color)\n    var(--q)\n    var(--q)\n    calc(var(--q))\n    inset;\n  background:\n    conic-gradient(\n      var(--color-previous) 0deg,\n      var(--color-previous) var(--angle-twilight-start),\n      var(--color-next) var(--angle-twilight-end),\n      var(--color-next) 360deg\n    );\n}\n\n.am {\n  --color-previous: var(--hebcal-clock-night-color, black);\n  --color-next: var(--hebcal-clock-day-color, white);\n}\n\n.pm {\n  --color-previous: var(--hebcal-clock-day-color, white);\n  --color-next: var(--hebcal-clock-night-color, black);\n}\n\n.hand {\n  position: absolute;\n  top: 50cqw;\n  transform-origin: center 0;\n  width: var(--width);\n  height: var(--height);\n  background-color: currentcolor;\n  border-width: 1cqw;\n  border-style: solid;\n  border-end-start-radius: 5cqw;\n  border-end-end-radius: 5cqw;\n  box-shadow: #0003 -0.5cqw -0.5cqw 0.5cqw;\n  z-index: 1;\n}\n\n#second {\n  --width: 1cqw;\n  --height: 45cqw;\n  color: var(--second-hand-color, grey);\n  border-color: var(--second-hand-color, grey);\n  left: calc(50cqw - var(--width) / 1 - 2cqw);\n}\n\n#minute {\n  --width: 3cqw;\n  --height: 40cqw;\n  color: var(--minute-hand-color, white);\n  border-color: var(--hour-hand-color, black);\n  left: calc(50cqw - var(--width) / 1 - 1.5cqw);\n}\n\n#hour {\n  --width: 5cqw;\n  --height: 25cqw;\n  color: var(--hour-hand-color, black);\n  border-color: var(--minute-hand-color, white);\n  left: calc(50cqw - var(--width) / 1);\n}\n\n#second.hand { rotate: var(--_second); }\n#minute.hand { rotate: var(--_minute); }\n#hour.hand   { rotate: var(--_hour); }\n\n#indices {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  rotate: 180deg;\n  transform-origin: center top 0px;\n  display: block;\n  width: 100cqw;\n  height: 100cqw;\n  position: relative;\n  --scale-coeff: 0.125;\n  --xly: calc((-1cqw * var(--scale-coeff) * 100) / 2 - 1cqw);\n  scale: calc(1 - var(--scale-coeff));\n  translate: 0 var(--xly);\n  font-size: 10cqw;\n  & li {\n    position: absolute;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 5cqw;\n    height: 5cqw;\n    font-family: var(--hebcal-clock-index-font, monospace);\n    font-weight: bold;\n    line-height: 10cqw;\n    text-align: center;\n    color: var(--bullets-color);\n       -moz-text-stroke: 1cqw white;\n    -webkit-text-stroke: 1cqw white;\n    paint-order: stroke fill;\n\n    &.num {\n      font-size: 18cqw;\n      color: var(--numbers-color);\n       -moz-text-stroke: 2cqw white;\n    -webkit-text-stroke: 2cqw white;\n    }\n\n    &:nth-child(1) {\n      top: 7.5cqw;\n      right: 23cqw;\n    }\n\n    &:nth-child(2) {\n      top: 25.5cqw;\n      right: 6.75cqw;\n    }\n\n    &:nth-child(3) {\n      top: 45cqw;\n      right: 2.5cqw;\n    }\n\n    &:nth-child(4) {\n      top: 70cqw;\n      right: 7cqw;\n    }\n\n    &:nth-child(5) {\n      top: 87cqw;\n      right: 23.5cqw;\n    }\n\n    &:nth-child(6) {\n      top: 92.5cqw;\n      right: 47.5cqw;\n    }\n\n    &:nth-child(7) {\n      top: 86.4cqw;\n      left: 23.3cqw;\n    }\n\n    &:nth-child(8) {\n      top: 70cqw;\n      left: 7cqw;\n    }\n\n    &:nth-child(9) {\n      top: 45cqw;\n      left: 2.5cqw;\n    }\n\n    &:nth-child(10) {\n      top: 24.5cqw;\n      left: 6.5cqw;\n    }\n\n    &:nth-child(11) {\n      top: 7cqw;\n      left: 23.5cqw;\n    }\n\n    &:nth-child(12) {\n      top: 2.5cqw;\n      right: 47.5cqw;\n    }\n  }\n}\n\n`;
const MS_PER_CLOCK_FACE = 1000 * 60 * 60 * 24;
/**
 * Hebcal clock
 */
let HebcalClock = (() => {
    let _classDecorators = [customElement('hebcal-clock')];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = HebcalDayConsumer;
    let _instanceExtraInitializers = [];
    let _type_decorators;
    let _type_initializers = [];
    var HebcalClock = class extends _classSuper {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _type_decorators = [property({ reflect: true })];
            __esDecorate(this, null, _type_decorators, { kind: "accessor", name: "type", static: false, private: false, access: { has: obj => "type" in obj, get: obj => obj.type, set: (obj, value) => { obj.type = value; } }, metadata: _metadata }, _type_initializers, _instanceExtraInitializers);
            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            HebcalClock = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static styles = [styles];
        #type_accessor_storage = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _type_initializers, 'digital'));
        /**
         * Digital clocks display the current 24-hour time
         * as well as the hebrew date, and the seasonal clock (winter / summer)
         */
        get type() { return this.#type_accessor_storage; }
        set type(value) { this.#type_accessor_storage = value; }
        render() {
            const { date } = this.hayom;
            const { hour, minute, second, dayPeriod } = this.hayom.timeParts;
            return html `
      <time datetime="${date.toISOString()}"
            style="${styleMap(this.#getTimeStyles())}">${this.type === 'digital' ? html `
        <strong part="time" dir="ltr">

          <span part="hour">${hour}</span>
          <span part="colon">:</span>
          <span part="minute">${minute}</span>
          <span part="colon">:</span>
          <span part="second">${second}</span>
        </strong>` : html `
        <div id="face"
             class="${classMap({ [dayPeriod]: true })}"
             style="${styleMap(this.#getAngleStyles())}"></div>
        <div id="second" class="hand"></div>
        <div id="minute" class="hand"></div>
        <div id="hour"   class="hand"></div>
        <ul id="indices">
          <li>•</li>
          <li>•</li>
          <li class="num">3</li>
          <li>•</li>
          <li>•</li>
          <li class="num">6</li>
          <li>•</li>
          <li>•</li>
          <li class="num">9</li>
          <li>•</li>
          <li>•</li>
          <li class="num">12</li>
        </ul>`}
      </time>
    `;
        }
        #calcAngle(key) {
            const date = this.hayom.dailyZmanim.get(key);
            const ms = date.getTime();
            const epochMidnight = this.hayom.midnight.getTime();
            const hourOffset = this.hayom.timeParts.dayPeriod === 'pm' ? 12 : 0;
            const offsetMs = ms - epochMidnight - (hourOffset * 1000 * 60 * 60);
            const ratio = (offsetMs / MS_PER_CLOCK_FACE);
            const degrees = (ratio * 360) * 2;
            return `${degrees.toFixed(2)}deg`;
        }
        // from midnight to noon, only show dawn and sunrise
        // from noon to midnight, only show sunset and nightfall
        #getAngleStyles() {
            if (this.type === 'digital')
                return {};
            switch (this.hayom.timeParts.dayPeriod) {
                case 'am': return {
                    '--angle-twilight-start': this.#calcAngle('alotHaShachar'),
                    '--angle-twilight-end': this.#calcAngle('sunrise'),
                };
                case 'pm': return {
                    '--angle-twilight-start': this.#calcAngle('sunset'),
                    '--angle-twilight-end': this.#calcAngle('tzeit'),
                };
            }
        }
        #getTimeStyles() {
            const { hour, minute, second } = this.hayom.timeParts;
            return {
                '--second': second,
                '--minute': minute,
                '--hour': hour,
            };
        }
        static {
            __runInitializers(_classThis, _classExtraInitializers);
        }
    };
    return HebcalClock = _classThis;
})();
export { HebcalClock };
//# sourceMappingURL=hebcal-clock.js.map