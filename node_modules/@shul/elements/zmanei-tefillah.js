import { __esDecorate, __runInitializers } from "tslib";
import { html } from 'lit';
import { HebcalDayConsumer } from './hebcal-day.js';
import { customElement } from 'lit/decorators.js';
import { css } from "lit";
const style = css `:host {\n  display: grid;\n  grid-template-columns: auto auto;\n  grid-auto-rows: max-content;\n  gap:\n    var(--hebcal-row-gap, 0.5em)\n    var(--hebcal-column-gap, 1em);\n}\n\nh2 {\n  grid-column: 1/-1;\n}\n\n`;
let ZmaneiTefillah = (() => {
    let _classDecorators = [customElement('zmanei-tefillah')];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = HebcalDayConsumer;
    var ZmaneiTefillah = class extends _classSuper {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            ZmaneiTefillah = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static styles = [...HebcalDayConsumer.styles, style];
        #mo = new MutationObserver(() => this.#update());
        connectedCallback() {
            super.connectedCallback();
            this.#update();
            this.#mo.observe(this, { childList: true });
        }
        disconectedCallback() {
            this.#mo.disconnect();
        }
        render() {
            const { isShabbat, isChag, isRoshChodesh, isCholHamoed, isWeekday, i18n: { zmaneiTefillah, } } = this.hayom;
            const openSlot = isCholHamoed && !isChag ? 'cholhamoed'
                : isChag ? 'yomtov'
                    : isRoshChodesh ? 'chodesh'
                        : isShabbat ? 'shabbat'
                            : isWeekday ? 'weekday'
                                : 'error';
            return html `
      <h2 id="heading">${zmaneiTefillah ?? ''}</h2>
      <slot name="${openSlot}"></slot>
    `;
        }
        #update() {
            for (const time of this.querySelectorAll('time')) {
                if (!time.dateTime) {
                    const { offset, offsetFrom } = time.dataset;
                    const parsed = parseFloat(offset);
                    if (!Number.isNaN(parsed)) {
                        const from = this.hayom.dailyZmanim.get(offsetFrom);
                        if (from) {
                            const date = new Date(from);
                            date.setTime(date.getTime() + parsed * 60 * 1000);
                            time.dateTime = date.toISOString();
                            time.textContent = date.toLocaleTimeString(this.hayom.locale, { timeStyle: 'short' });
                        }
                    }
                }
            }
        }
        static {
            __runInitializers(_classThis, _classExtraInitializers);
        }
    };
    return ZmaneiTefillah = _classThis;
})();
export { ZmaneiTefillah };
//# sourceMappingURL=zmanei-tefillah.js.map