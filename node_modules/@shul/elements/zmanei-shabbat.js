import { __esDecorate, __runInitializers } from "tslib";
import { html } from 'lit';
import { customElement } from 'lit/decorators.js';
import { HebcalDayConsumer } from './hebcal-day.js';
import { css } from "lit";
const style = css `.term {\n  display: flex;\n  gap: .5em;\n}\n\n.emoji {\n  margin-inline-start: auto;\n}\n`;
let ZmaneiShabbat = (() => {
    let _classDecorators = [customElement('zmanei-shabbat')];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = HebcalDayConsumer;
    var ZmaneiShabbat = class extends _classSuper {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            ZmaneiShabbat = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static styles = [
            ...HebcalDayConsumer.styles,
            style
        ];
        render() {
            const { i18n, isChag, isErevChag, parsha, candles: { lighting, havdalah, } } = this.hayom;
            const locale = this.hayom.locale.substring(0, 1);
            let desc = i18n.shabbat;
            // TODO: eruv tavshillin, etc
            if ((isChag || isErevChag))
                desc += ` ${i18n.and}`;
            if (isChag || isErevChag)
                desc += i18n.chag;
            if (!havdalah)
                console.log(this.hayom.hDate);
            return html `
      <slot>
        <h2>
          <span>üç∑ ${i18n.zmanei} ${desc}</span>
          <span part="parshah">üìñ ${parsha?.render(locale) ?? ''}</span>
        </h2>
      </slot>
      <dl id="events" part="events">
        <dt class="term" part="list term lighting">
          <span>${lighting.renderBrief(locale)}</span>
          <span class="emoji" part="emoji">${lighting.getEmoji()}</span>
        </dt>
        <dd part="list definition lighting">
          <time datetime="${lighting.eventTime?.toISOString()}">
            ${lighting.eventTimeStr}
          </time>${this.#dump(lighting.eventTime)}
        </dd>
        <dt class="term" part="list term havdalah">
          <span>${havdalah.renderBrief(locale)}</span>
          <span class="emoji" part="emoji">${havdalah.getEmoji()}</span>
        </dt>
        <dd part="list definition havdalah">
          <time datetime="${havdalah.eventTime.toISOString()}">
            ${havdalah.eventTimeStr}
          </time>${this.#dump(havdalah.eventTime)}
        </dd>
      </dl>
    `;
        }
        #dump(obj) {
            return !this.hayom.debug ? ''
                : html `<pre dir="ltr" lang="en">${JSON.stringify(obj, null, 2)}</pre>`;
        }
        static {
            __runInitializers(_classThis, _classExtraInitializers);
        }
    };
    return ZmaneiShabbat = _classThis;
})();
export { ZmaneiShabbat };
//# sourceMappingURL=zmanei-shabbat.js.map