/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
var __addDisposableResource = (this && this.__addDisposableResource) || function (env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        env.stack.push({ value: value, dispose: dispose, async: async });
    }
    else if (async) {
        env.stack.push({ async: true });
    }
    return value;
};
var __disposeResources = (this && this.__disposeResources) || (function (SuppressedError) {
    return function (env) {
        function fail(e) {
            env.error = env.hasError ? new SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
            env.hasError = true;
        }
        function next() {
            while (env.stack.length) {
                var rec = env.stack.pop();
                try {
                    var result = rec.dispose && rec.dispose.call(rec.value);
                    if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
                }
                catch (e) {
                    fail(e);
                }
            }
            if (env.hasError) throw env.error;
        }
        return next();
    };
})(typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
});
import { Analyzer } from './analyzer.js';
import { Executor } from './executor.js';
import { WorkerPool } from './util/worker-pool.js';
import { unreachable } from './util/unreachable.js';
import { packageDir, getOptions } from './cli-options.js';
import { DefaultLogger } from './logging/default-logger.js';
import { Console } from './logging/logger.js';
const run = async (options) => {
    const env_1 = { stack: [], error: void 0, hasError: false };
    try {
        const logger = __addDisposableResource(env_1, options.logger, false);
        const workerPool = new WorkerPool(options.numWorkers);
        let cache;
        switch (options.cache) {
            case 'local': {
                // Import dynamically so that we import fewer unnecessary modules.
                const { LocalCache } = await import('./caching/local-cache.js');
                cache = new LocalCache();
                break;
            }
            case 'github': {
                const { GitHubActionsCache } = await import('./caching/github-actions-cache.js');
                const cacheResult = GitHubActionsCache.create(logger);
                if (!cacheResult.ok) {
                    if (cacheResult.error.reason === 'invalid-usage') {
                        return {
                            ok: false,
                            error: [
                                {
                                    script: options.script,
                                    type: 'failure',
                                    reason: 'invalid-usage',
                                    message: cacheResult.error.message,
                                },
                            ],
                        };
                    }
                    else {
                        const never = cacheResult.error.reason;
                        throw new Error(`Internal error: unexpected cache result error reason: ${String(never)}`);
                    }
                }
                cache = cacheResult.value;
                break;
            }
            case 'none': {
                cache = undefined;
                break;
            }
            default: {
                throw new Error(`Unhandled cache: ${unreachable(options.cache)}`);
            }
        }
        if (options.watch) {
            const { Watcher } = await import('./watcher.js');
            const watcher = new Watcher(options.script, options.extraArgs, logger, workerPool, cache, options.failureMode, options.agent);
            process.on('SIGINT', () => {
                watcher.abort();
            });
            await watcher.watch();
            return { ok: true, value: undefined };
        }
        else {
            const analyzer = new Analyzer(options.agent, logger);
            const { config } = await analyzer.analyze(options.script, options.extraArgs);
            if (!config.ok) {
                return config;
            }
            const executor = new Executor(config.value, logger, workerPool, cache, options.failureMode, undefined, false);
            process.on('SIGINT', () => {
                executor.abort();
            });
            const { persistentServices, errors } = await executor.execute();
            if (persistentServices.size > 0) {
                for (const service of persistentServices.values()) {
                    const result = await service.terminated;
                    if (!result.ok) {
                        errors.push(result.error);
                    }
                }
            }
            logger.printMetrics();
            return errors.length === 0
                ? { ok: true, value: undefined }
                : { ok: false, error: errors };
        }
    }
    catch (e_1) {
        env_1.error = e_1;
        env_1.hasError = true;
    }
    finally {
        __disposeResources(env_1);
    }
};
const optionsResult = await getOptions();
if (!optionsResult.ok) {
    // if we can't figure out our options, we can't figure out what logger
    // we should use here, so just use the default logger.
    const console = new Console(process.stderr, process.stderr);
    const logger = new DefaultLogger(packageDir ?? process.cwd(), console);
    logger.log(optionsResult.error);
    process.exit(1);
}
const options = optionsResult.value;
const result = await run(options);
if (!result.ok) {
    for (const failure of result.error) {
        options.logger.log(failure);
    }
    process.exitCode = 1;
}
//# sourceMappingURL=cli.js.map