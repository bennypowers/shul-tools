import fs from "node:fs";
import { URL, pathToFileURL } from "node:url";
import CleanCSS from "clean-css";
import ts from "typescript";
const SEEN_SOURCES = /* @__PURE__ */ new WeakSet();
function createLitCssImportStatement(ctx, sourceFile, specifier, tag) {
  if (SEEN_SOURCES.has(sourceFile))
    return;
  for (const statement of sourceFile.statements) {
    if (ts.isImportDeclaration(statement) && statement.moduleSpecifier.getText() === specifier) {
      for (const binding of statement.importClause?.namedBindings?.getChildren() ?? []) {
        if (binding.getText() === tag) {
          SEEN_SOURCES.add(sourceFile);
          return;
        }
      }
    }
  }
  SEEN_SOURCES.add(sourceFile);
  return ctx.factory.createImportDeclaration(
    void 0,
    ctx.factory.createImportClause(
      false,
      void 0,
      ctx.factory.createNamedImports([
        ctx.factory.createImportSpecifier(
          false,
          void 0,
          ctx.factory.createIdentifier("css")
        )
      ])
    ),
    ctx.factory.createStringLiteral(specifier)
  );
}
function createLitCssTaggedTemplateLiteral(ctx, stylesheet, name, tag) {
  return ctx.factory.createVariableStatement(
    void 0,
    ctx.factory.createVariableDeclarationList([
      ctx.factory.createVariableDeclaration(
        name ?? "style",
        void 0,
        void 0,
        ctx.factory.createTaggedTemplateExpression(
          ctx.factory.createIdentifier(tag),
          void 0,
          ctx.factory.createNoSubstitutionTemplateLiteral(stylesheet)
        )
      )
    ], ts.NodeFlags.Const)
  );
}
function minifyCss(stylesheet, filePath) {
  try {
    const clean = new CleanCSS({ returnPromise: false });
    const { styles } = clean.minify(stylesheet);
    return styles;
  } catch (e) {
    console.log("Could not minify ", filePath);
    console.error(e);
    return stylesheet;
  }
}
function typescript_transform_lit_css_default(program, pluginConfig, extras) {
  const tagPkgSpecifier = pluginConfig.specifier ?? "lit";
  const tag = pluginConfig.tag ?? "css";
  return (ctx) => {
    function visitor(node) {
      if (ts.isImportDeclaration(node) && !node.importClause?.isTypeOnly) {
        const importedStyleSheetSpecifier = node.moduleSpecifier.getText().replace(/^'(.*)'$/, "$1");
        if (importedStyleSheetSpecifier.endsWith(".css")) {
          if (pluginConfig.inline) {
            const { fileName } = node.getSourceFile();
            const dir = pathToFileURL(fileName);
            const url = new URL(importedStyleSheetSpecifier, dir);
            const content = fs.readFileSync(url, "utf-8");
            const stylesheet = pluginConfig.uglify ? minifyCss(content, url.pathname) : content;
            return [
              createLitCssImportStatement(
                ctx,
                node.getSourceFile(),
                tagPkgSpecifier,
                tag
              ),
              createLitCssTaggedTemplateLiteral(
                ctx,
                stylesheet,
                node.importClause?.name?.getText(),
                tag
              )
            ];
          } else {
            return ctx.factory.createImportDeclaration(
              node.modifiers,
              node.importClause,
              ctx.factory.createStringLiteral(`${importedStyleSheetSpecifier}.js`)
            );
          }
        }
      }
      return ts.visitEachChild(node, visitor, ctx);
    }
    return (sourceFile) => {
      const children = sourceFile.getChildren();
      const decl = children.find(
        (x) => !ts.isTypeOnlyImportOrExportDeclaration(x) && !ts.isNamespaceImport(x) && ts.isImportDeclaration(x) && x.moduleSpecifier.getText() === tagPkgSpecifier && x.importClause?.namedBindings
      );
      const litImportBindings = decl?.importClause?.namedBindings;
      const hasStyleImports = children.find((x) => ts.isImportDeclaration(x) && x.moduleSpecifier.getText().endsWith(".css"));
      if (hasStyleImports) {
        if (litImportBindings && ts.isNamedImports(litImportBindings) && !litImportBindings.elements?.some((x) => x.getText() === tag)) {
          ctx.factory.updateNamedImports(
            litImportBindings,
            [
              ...litImportBindings.elements,
              ctx.factory.createImportSpecifier(
                false,
                void 0,
                ctx.factory.createIdentifier(tag)
              )
            ]
          );
        }
      }
      return ts.visitEachChild(sourceFile, visitor, ctx);
    };
  };
}
export {
  typescript_transform_lit_css_default as default
};
//# sourceMappingURL=typescript-transform-lit-css.js.map
