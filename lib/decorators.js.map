{"version":3,"file":"decorators.js","sourceRoot":"","sources":["decorators.ts"],"names":[],"mappings":"AAMA,MAAM,UAAU,QAAQ,CAItB,GAAQ;IACR,OAAO,UACL,QAAgC,EAChC,OAA+D;QAE/D,OAAO,CAAC,cAAc,CAAC;YACrB,sDAAsD;YACtD,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;YAAC,IAAI,CAAC,UAAU,GAAG,KAAK,WAAU,OAA6B;gBACzF,MAAM,UAAU,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACtC,IAAI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;oBAClB,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAA;QACH,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;IACtB,CAAC,CAAA;AACH,CAAC","sourcesContent":["import type { LitElement, PropertyValues } from 'lit';\n\ntype PropertyKeys<T> = Parameters<PropertyValues<T>['get']>[0]\n\ntype WrapperMethod<T, Args extends any[]> = (this: T, ...args: Args) => void;\n\nexport function observes<\n  T extends LitElement,\n  Key extends PropertyKeys<T>,\n  Args extends [old: T[Key]],\n>(key: Key) {\n  return function(\n    original: WrapperMethod<T, Args>,\n    context: ClassMethodDecoratorContext<T, WrapperMethod<T, Args>>\n  ) {\n    context.addInitializer(function() {\n      // @ts-expect-error: i know its wrong but i don't mind\n      const { willUpdate } = this; this.willUpdate = async function(changed: PropertyValues<this>) {\n        await willUpdate?.call(this, changed);\n        if (changed.has(key))\n          original.call(this, changed.get(key));\n      }\n    });\n    return () => void 0;\n  }\n}\n"]}